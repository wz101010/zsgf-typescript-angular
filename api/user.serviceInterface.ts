/**
 * 全部 API 文档
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AppUserResetEmailRequest } from '../model/models';
import { AppUserResetPhoneRequest } from '../model/models';
import { AppUserResetPwdRequest } from '../model/models';
import { BooleanApiResponse } from '../model/models';
import { EmailSignInRequest } from '../model/models';
import { EmailSignUpRequest } from '../model/models';
import { PhoneSignInRequest } from '../model/models';
import { PhoneSignUpRequest } from '../model/models';
import { SendEmailCodeRequest } from '../model/models';
import { SendSMSCodeRequest } from '../model/models';
import { SetupCodeApiResponse } from '../model/models';
import { SignInRequest } from '../model/models';
import { SignUpRequest } from '../model/models';
import { TokenModelApiResponse } from '../model/models';
import { UnionIDSignInRequest } from '../model/models';
import { UnionIDSignUpRequest } from '../model/models';
import { UpdateProfileRequest } from '../model/models';
import { User } from '../model/models';
import { UserApiResponse } from '../model/models';
import { UserListResultApiResponse } from '../model/models';
import { UserProfileResultApiResponse } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface UserRequestParams {
    id: number;
    appKey: string;
}

export interface UserClearRequestParams {
    appKey: string;
}

export interface UserDeactivateHardRequestParams {
    appKey: string;
}

export interface UserDeleteRequestParams {
    id: number;
    appKey: string;
}

export interface UserEmailSignInRequestParams {
    appKey: string;
    emailSignInRequest?: EmailSignInRequest;
}

export interface UserEmailSignUpRequestParams {
    appKey: string;
    emailSignUpRequest?: EmailSignUpRequest;
}

export interface UserExportRequestParams {
    appKey: string;
}

export interface UserImportRequestParams {
    appKey: string;
    check?: boolean;
    file?: Blob;
}

export interface UserPhoneSignInRequestParams {
    appKey: string;
    phoneSignInRequest?: PhoneSignInRequest;
}

export interface UserPhoneSignUpRequestParams {
    appKey: string;
    phoneSignUpRequest?: PhoneSignUpRequest;
}

export interface UserProfileRequestParams {
    appKey: string;
}

export interface UserPutRequestParams {
    id: number;
    appKey: string;
    user?: User;
}

export interface UserResetEmailRequestParams {
    appKey: string;
    appUserResetEmailRequest?: AppUserResetEmailRequest;
}

export interface UserResetPhoneRequestParams {
    appKey: string;
    appUserResetPhoneRequest?: AppUserResetPhoneRequest;
}

export interface UserResetPwdRequestParams {
    appKey: string;
    appUserResetPwdRequest?: AppUserResetPwdRequest;
}

export interface UserSendEmailCodeRequestParams {
    appKey: string;
    sendEmailCodeRequest?: SendEmailCodeRequest;
}

export interface UserSendSMSCodeRequestParams {
    appKey: string;
    sendSMSCodeRequest?: SendSMSCodeRequest;
}

export interface UserSignInRequestParams {
    appKey: string;
    signInRequest?: SignInRequest;
}

export interface UserSignUpRequestParams {
    appKey: string;
    signUpRequest?: SignUpRequest;
}

export interface UserTwoFactorAuthRequestParams {
    appKey: string;
}

export interface UserUnionIDSignInRequestParams {
    appKey: string;
    unionIDSignInRequest?: UnionIDSignInRequest;
}

export interface UserUnionIDSignUpRequestParams {
    appKey: string;
    unionIDSignUpRequest?: UnionIDSignUpRequest;
}

export interface UserUpdateProfileRequestParams {
    appKey: string;
    updateProfileRequest?: UpdateProfileRequest;
}

export interface UsersRequestParams {
    appKey: string;
    userName?: string;
    email?: string;
    phone?: string;
    platform?: string;
    unionId?: string;
    role?: string;
    skip?: number;
    take?: number;
}


export interface UserServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 获取用户详情
     * 根据用户ID获取用户详情
* @param requestParameters
     */
    user(requestParameters: UserRequestParams, extraHttpRequestParams?: any): Observable<UserApiResponse>;

    /**
     * 清空用户数据
     * 清空用户数据
* @param requestParameters
     */
    userClear(requestParameters: UserClearRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 注销账号
     * 清除用户所有附属数据，并注销账号
* @param requestParameters
     */
    userDeactivateHard(requestParameters: UserDeactivateHardRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 删除用户
     * 根据用户ID删除用户
* @param requestParameters
     */
    userDelete(requestParameters: UserDeleteRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 邮箱登录
     * 使用邮箱进行登录
* @param requestParameters
     */
    userEmailSignIn(requestParameters: UserEmailSignInRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * 邮箱注册
     * 使用邮箱进行注册
* @param requestParameters
     */
    userEmailSignUp(requestParameters: UserEmailSignUpRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * 导出用户数据
     * 导出所有用户数据为Excel文件
* @param requestParameters
     */
    userExport(requestParameters: UserExportRequestParams, extraHttpRequestParams?: any): Observable<Blob>;

    /**
     * 导入用户数据
     * 导入用户数据
* @param requestParameters
     */
    userImport(requestParameters: UserImportRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 手机登录
     * 使用手机号码进行登录
* @param requestParameters
     */
    userPhoneSignIn(requestParameters: UserPhoneSignInRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * 手机注册
     * 使用手机号码进行注册
* @param requestParameters
     */
    userPhoneSignUp(requestParameters: UserPhoneSignUpRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * 获取个人资料
     * 获取当前用户的个人资料
* @param requestParameters
     */
    userProfile(requestParameters: UserProfileRequestParams, extraHttpRequestParams?: any): Observable<UserProfileResultApiResponse>;

    /**
     * 更新用户信息
     * 根据用户ID更新用户信息
* @param requestParameters
     */
    userPut(requestParameters: UserPutRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 重置邮箱
     * 通过邮箱验证码重置邮箱
* @param requestParameters
     */
    userResetEmail(requestParameters: UserResetEmailRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 重置手机号
     * 通过手机号验证码重置手机号
* @param requestParameters
     */
    userResetPhone(requestParameters: UserResetPhoneRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 重置密码
     * 通过手机号或邮箱重置密码
* @param requestParameters
     */
    userResetPwd(requestParameters: UserResetPwdRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 发送邮箱验证码
     * 发送邮箱验证码用于注册或找回密码
* @param requestParameters
     */
    userSendEmailCode(requestParameters: UserSendEmailCodeRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 发送手机验证码
     * 发送手机验证码用于注册或找回密码
* @param requestParameters
     */
    userSendSMSCode(requestParameters: UserSendSMSCodeRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 密码登录
     * 使用账号密码进行登录
* @param requestParameters
     */
    userSignIn(requestParameters: UserSignInRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * 账号注册
     * 使用账号密码进行注册
* @param requestParameters
     */
    userSignUp(requestParameters: UserSignUpRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * 二次验证
     * 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
* @param requestParameters
     */
    userTwoFactorAuth(requestParameters: UserTwoFactorAuthRequestParams, extraHttpRequestParams?: any): Observable<SetupCodeApiResponse>;

    /**
     * UnionID登录
     * 使用UnionID进行登录
* @param requestParameters
     */
    userUnionIDSignIn(requestParameters: UserUnionIDSignInRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * UnionID注册
     * 使用UnionID进行注册
* @param requestParameters
     */
    userUnionIDSignUp(requestParameters: UserUnionIDSignUpRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * 更新个人资料
     * 更新当前用户的个人资料
* @param requestParameters
     */
    userUpdateProfile(requestParameters: UserUpdateProfileRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 获取用户列表
     * 根据条件获取用户列表
* @param requestParameters
     */
    users(requestParameters: UsersRequestParams, extraHttpRequestParams?: any): Observable<UserListResultApiResponse>;

}
