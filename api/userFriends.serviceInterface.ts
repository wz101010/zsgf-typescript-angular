/**
 * 全部 API 文档
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { BooleanApiResponse } from '../model/models';
import { FollowerPutModel } from '../model/models';
import { GetUserProfileResultApiResponse } from '../model/models';
import { UserCommonInterestsResultApiResponse } from '../model/models';
import { UserFollowersResultApiResponse } from '../model/models';
import { UserFriendsNearByResultApiResponse } from '../model/models';
import { UserMutualFollowersResultApiResponse } from '../model/models';
import { UserMutualFollowingsResultApiResponse } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface UserCommonInterestsRequestParams {
    appKey: string;
    tag?: string;
    skip?: number;
    take?: number;
    userId?: string;
}

export interface UserFollowUserRequestParams {
    userId: number;
    appKey: string;
    fromUserId?: string;
}

export interface UserFollowerPutRequestParams {
    id: number;
    appKey: string;
    followerPutModel?: FollowerPutModel;
}

export interface UserFollowersRequestParams {
    appKey: string;
    tag?: string;
    status?: string;
    targetUserId?: number;
    skip?: number;
    take?: number;
    userId?: string;
}

export interface UserFollowingRequestParams {
    appKey: string;
    tag?: string;
    status?: string;
    targetUserId?: number;
    skip?: number;
    take?: number;
    checkUserId?: number;
    onlyIDs?: boolean;
    userId?: string;
}

export interface UserFriendsNearByRequestParams {
    longitude: number;
    latitude: number;
    appKey: string;
    country?: string;
    state?: string;
    city?: string;
    district?: string;
    gender?: string;
    ageS?: number;
    ageE?: number;
    tag?: string;
    distance?: number;
    skip?: number;
    take?: number;
    userId?: string;
}

export interface UserMutualFollowersRequestParams {
    appKey: string;
    skip?: number;
    take?: number;
    userId?: string;
}

export interface UserMutualFollowingsRequestParams {
    appKey: string;
    skip?: number;
    take?: number;
    userId?: string;
}

export interface UserProfileByIdRequestParams {
    userId: number;
    appKey: string;
}

export interface UserUnfollowUserRequestParams {
    userId: number;
    appKey: string;
    fromUserId?: string;
}


export interface UserFriendsServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 推荐相似兴趣用户
     * 推荐有共同爱好的用户
* @param requestParameters
     */
    userCommonInterests(requestParameters: UserCommonInterestsRequestParams, extraHttpRequestParams?: any): Observable<UserCommonInterestsResultApiResponse>;

    /**
     * 添加关注
     * 关注指定用户
* @param requestParameters
     */
    userFollowUser(requestParameters: UserFollowUserRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 刷新粉丝数据
     * 根据粉丝ID更新粉丝信息
* @param requestParameters
     */
    userFollowerPut(requestParameters: UserFollowerPutRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 获取粉丝列表
     * 根据条件获取我的粉丝列表
* @param requestParameters
     */
    userFollowers(requestParameters: UserFollowersRequestParams, extraHttpRequestParams?: any): Observable<UserFollowersResultApiResponse>;

    /**
     * 获取关注列表 / 判断是否关注
     * 根据条件获取我的关注列表，或判断是否关注某个用户
* @param requestParameters
     */
    userFollowing(requestParameters: UserFollowingRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

    /**
     * 推荐附近用户
     * 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
* @param requestParameters
     */
    userFriendsNearBy(requestParameters: UserFriendsNearByRequestParams, extraHttpRequestParams?: any): Observable<UserFriendsNearByResultApiResponse>;

    /**
     * 推荐共同粉丝用户
     * 推荐有共同粉丝的用户
* @param requestParameters
     */
    userMutualFollowers(requestParameters: UserMutualFollowersRequestParams, extraHttpRequestParams?: any): Observable<UserMutualFollowersResultApiResponse>;

    /**
     * 推荐共同关注用户
     * 推荐有共同关注的用户
* @param requestParameters
     */
    userMutualFollowings(requestParameters: UserMutualFollowingsRequestParams, extraHttpRequestParams?: any): Observable<UserMutualFollowingsResultApiResponse>;

    /**
     * 获取用户资料
     * 用于他人主页展示
* @param requestParameters
     */
    userProfileById(requestParameters: UserProfileByIdRequestParams, extraHttpRequestParams?: any): Observable<GetUserProfileResultApiResponse>;

    /**
     * 取消关注
     * 取消关注指定用户
* @param requestParameters
     */
    userUnfollowUser(requestParameters: UserUnfollowUserRequestParams, extraHttpRequestParams?: any): Observable<BooleanApiResponse>;

}
