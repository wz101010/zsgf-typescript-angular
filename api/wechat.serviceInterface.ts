/**
 * 全部 API 文档
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Int64ApiResponse } from '../model/models';
import { QRCodePreSignInRequest } from '../model/models';
import { QRCodeScanRequest } from '../model/models';
import { QRCodeSignInRequest } from '../model/models';
import { QRCodeSignUpRequest } from '../model/models';
import { StringApiResponse } from '../model/models';
import { TokenModelApiResponse } from '../model/models';
import { UserQRCodeScanResultApiResponse } from '../model/models';
import { WechatJSConfigResultApiResponse } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface ConfirmQRCodeLoginRequestParams {
    appKey: string;
    qRCodeSignInRequest?: QRCodeSignInRequest;
}

export interface ConfirmQRCodeRegistrationRequestParams {
    appKey: string;
    qRCodeSignUpRequest?: QRCodeSignUpRequest;
}

export interface InitiateQRAuthSessionRequestParams {
    appKey: string;
    qRCodePreSignInRequest?: QRCodePreSignInRequest;
}

export interface ScanQRCodeForAuthRequestParams {
    appKey: string;
    qRCodeScanRequest?: QRCodeScanRequest;
}

export interface WechatDecryptRequestParams {
    appKey: string;
    encryptedData?: string;
    iv?: string;
    sessionKey?: string;
}

export interface WechatGenerateSchemeRequestParams {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatJSCode2SessionRequestParams {
    appKey: string;
    jsCode?: string;
}

export interface WechatJSConfigRequestParams {
    appKey: string;
    url?: string;
}

export interface WechatMsgSecCheckRequestParams {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatSubscribeMSGRequestParams {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatSubscribeSendRequestParams {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatUrlLinkGenerateRequestParams {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatUserInfoRequestParams {
    appKey: string;
    openid?: string;
}

export interface WechatWXACodeGetRequestParams {
    appKey: string;
    requestBody?: Array<any>;
}

export interface WechatWXACodeGetUnlimitedRequestParams {
    appKey: string;
    requestBody?: Array<any>;
}


export interface WechatServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 确认二维码登录请求
     * 微信小程序用户确认二维码登录并获取访问令牌
* @param requestParameters
     */
    confirmQRCodeLogin(requestParameters: ConfirmQRCodeLoginRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * 确认二维码注册请求
     * 微信小程序用户通过二维码完成注册并获取访问令牌
* @param requestParameters
     */
    confirmQRCodeRegistration(requestParameters: ConfirmQRCodeRegistrationRequestParams, extraHttpRequestParams?: any): Observable<TokenModelApiResponse>;

    /**
     * 初始化二维码认证会话
     * 创建用于微信小程序扫码登录/注册的认证会话
* @param requestParameters
     */
    initiateQRAuthSession(requestParameters: InitiateQRAuthSessionRequestParams, extraHttpRequestParams?: any): Observable<Int64ApiResponse>;

    /**
     * 验证二维码扫描结果
     * 微信小程序扫描二维码并获取应用授权信息
* @param requestParameters
     */
    scanQRCodeForAuth(requestParameters: ScanQRCodeForAuthRequestParams, extraHttpRequestParams?: any): Observable<UserQRCodeScanResultApiResponse>;

    /**
     * 解密小程序用户数据
     * 解密小程序加密数据
* @param requestParameters
     */
    wechatDecrypt(requestParameters: WechatDecryptRequestParams, extraHttpRequestParams?: any): Observable<StringApiResponse>;

    /**
     * 生成小程序Scheme码
     * 生成小程序的scheme码
* @param requestParameters
     */
    wechatGenerateScheme(requestParameters: WechatGenerateSchemeRequestParams, extraHttpRequestParams?: any): Observable<StringApiResponse>;

    /**
     * 校验小程序登录状态
     * 校验小程序登录凭证
* @param requestParameters
     */
    wechatJSCode2Session(requestParameters: WechatJSCode2SessionRequestParams, extraHttpRequestParams?: any): Observable<StringApiResponse>;

    /**
     * 配置公众号JS SDK
     * 获取公众号H5的JS SDK配置
* @param requestParameters
     */
    wechatJSConfig(requestParameters: WechatJSConfigRequestParams, extraHttpRequestParams?: any): Observable<WechatJSConfigResultApiResponse>;

    /**
     * 小程序内容安全检测
     * 检测消息内容是否含有违法违规信息
* @param requestParameters
     */
    wechatMsgSecCheck(requestParameters: WechatMsgSecCheckRequestParams, extraHttpRequestParams?: any): Observable<any>;

    /**
     * 发送公众号一次性订阅消息
     * 发送公众号H5一次性订阅消息
* @param requestParameters
     */
    wechatSubscribeMSG(requestParameters: WechatSubscribeMSGRequestParams, extraHttpRequestParams?: any): Observable<StringApiResponse>;

    /**
     * 发送小程序订阅消息
     * 发送小程序订阅消息
* @param requestParameters
     */
    wechatSubscribeSend(requestParameters: WechatSubscribeSendRequestParams, extraHttpRequestParams?: any): Observable<StringApiResponse>;

    /**
     * 生成小程序URL跳转链接
     * 生成小程序的网页跳转地址
* @param requestParameters
     */
    wechatUrlLinkGenerate(requestParameters: WechatUrlLinkGenerateRequestParams, extraHttpRequestParams?: any): Observable<StringApiResponse>;

    /**
     * 获取公众号H5 UnionID
     * 获取公众号H5用户的UnionID
* @param requestParameters
     */
    wechatUserInfo(requestParameters: WechatUserInfoRequestParams, extraHttpRequestParams?: any): Observable<StringApiResponse>;

    /**
     * 获取小程序码（普通）
     * 获取小程序码
* @param requestParameters
     */
    wechatWXACodeGet(requestParameters: WechatWXACodeGetRequestParams, extraHttpRequestParams?: any): Observable<Blob>;

    /**
     * 获取小程序码（无限制）
     * 获取无限制的小程序码
* @param requestParameters
     */
    wechatWXACodeGetUnlimited(requestParameters: WechatWXACodeGetUnlimitedRequestParams, extraHttpRequestParams?: any): Observable<Blob>;

}
